//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace NBADWDataEntryApplication {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dstblEnvironmentalPlanning : DataSet {
        
        private tblEnvironmentalPlanningDataTable tabletblEnvironmentalPlanning;
        
        public dstblEnvironmentalPlanning() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dstblEnvironmentalPlanning(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblEnvironmentalPlanning"] != null)) {
                    this.Tables.Add(new tblEnvironmentalPlanningDataTable(ds.Tables["tblEnvironmentalPlanning"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblEnvironmentalPlanningDataTable tblEnvironmentalPlanning {
            get {
                return this.tabletblEnvironmentalPlanning;
            }
        }
        
        public override DataSet Clone() {
            dstblEnvironmentalPlanning cln = ((dstblEnvironmentalPlanning)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tblEnvironmentalPlanning"] != null)) {
                this.Tables.Add(new tblEnvironmentalPlanningDataTable(ds.Tables["tblEnvironmentalPlanning"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletblEnvironmentalPlanning = ((tblEnvironmentalPlanningDataTable)(this.Tables["tblEnvironmentalPlanning"]));
            if ((this.tabletblEnvironmentalPlanning != null)) {
                this.tabletblEnvironmentalPlanning.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dstblEnvironmentalPlanning";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dstblEnvironmentalPlanning.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletblEnvironmentalPlanning = new tblEnvironmentalPlanningDataTable();
            this.Tables.Add(this.tabletblEnvironmentalPlanning);
        }
        
        private bool ShouldSerializetblEnvironmentalPlanning() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tblEnvironmentalPlanningRowChangeEventHandler(object sender, tblEnvironmentalPlanningRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblEnvironmentalPlanningDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnActionCompletionDate;
            
            private DataColumn columnActionPriority;
            
            private DataColumn columnActionRequired;
            
            private DataColumn columnActionTargetDate;
            
            private DataColumn columnAquaticActivityID;
            
            private DataColumn columnEnvPlanningID;
            
            private DataColumn columnFollowUpCompletionDate;
            
            private DataColumn columnFollowUpRequired;
            
            private DataColumn columnFollowUpTargetDate;
            
            private DataColumn columnIssue;
            
            private DataColumn columnIssueCategory;
            
            internal tblEnvironmentalPlanningDataTable() : 
                    base("tblEnvironmentalPlanning") {
                this.InitClass();
            }
            
            internal tblEnvironmentalPlanningDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ActionCompletionDateColumn {
                get {
                    return this.columnActionCompletionDate;
                }
            }
            
            internal DataColumn ActionPriorityColumn {
                get {
                    return this.columnActionPriority;
                }
            }
            
            internal DataColumn ActionRequiredColumn {
                get {
                    return this.columnActionRequired;
                }
            }
            
            internal DataColumn ActionTargetDateColumn {
                get {
                    return this.columnActionTargetDate;
                }
            }
            
            internal DataColumn AquaticActivityIDColumn {
                get {
                    return this.columnAquaticActivityID;
                }
            }
            
            internal DataColumn EnvPlanningIDColumn {
                get {
                    return this.columnEnvPlanningID;
                }
            }
            
            internal DataColumn FollowUpCompletionDateColumn {
                get {
                    return this.columnFollowUpCompletionDate;
                }
            }
            
            internal DataColumn FollowUpRequiredColumn {
                get {
                    return this.columnFollowUpRequired;
                }
            }
            
            internal DataColumn FollowUpTargetDateColumn {
                get {
                    return this.columnFollowUpTargetDate;
                }
            }
            
            internal DataColumn IssueColumn {
                get {
                    return this.columnIssue;
                }
            }
            
            internal DataColumn IssueCategoryColumn {
                get {
                    return this.columnIssueCategory;
                }
            }
            
            public tblEnvironmentalPlanningRow this[int index] {
                get {
                    return ((tblEnvironmentalPlanningRow)(this.Rows[index]));
                }
            }
            
            public event tblEnvironmentalPlanningRowChangeEventHandler tblEnvironmentalPlanningRowChanged;
            
            public event tblEnvironmentalPlanningRowChangeEventHandler tblEnvironmentalPlanningRowChanging;
            
            public event tblEnvironmentalPlanningRowChangeEventHandler tblEnvironmentalPlanningRowDeleted;
            
            public event tblEnvironmentalPlanningRowChangeEventHandler tblEnvironmentalPlanningRowDeleting;
            
            public void AddtblEnvironmentalPlanningRow(tblEnvironmentalPlanningRow row) {
                this.Rows.Add(row);
            }
            
            public tblEnvironmentalPlanningRow AddtblEnvironmentalPlanningRow(System.DateTime ActionCompletionDate, short ActionPriority, string ActionRequired, System.DateTime ActionTargetDate, int AquaticActivityID, System.DateTime FollowUpCompletionDate, bool FollowUpRequired, System.DateTime FollowUpTargetDate, string Issue, string IssueCategory) {
                tblEnvironmentalPlanningRow rowtblEnvironmentalPlanningRow = ((tblEnvironmentalPlanningRow)(this.NewRow()));
                rowtblEnvironmentalPlanningRow.ItemArray = new object[] {
                        ActionCompletionDate,
                        ActionPriority,
                        ActionRequired,
                        ActionTargetDate,
                        AquaticActivityID,
                        null,
                        FollowUpCompletionDate,
                        FollowUpRequired,
                        FollowUpTargetDate,
                        Issue,
                        IssueCategory};
                this.Rows.Add(rowtblEnvironmentalPlanningRow);
                return rowtblEnvironmentalPlanningRow;
            }
            
            public tblEnvironmentalPlanningRow FindByEnvPlanningID(int EnvPlanningID) {
                return ((tblEnvironmentalPlanningRow)(this.Rows.Find(new object[] {
                            EnvPlanningID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tblEnvironmentalPlanningDataTable cln = ((tblEnvironmentalPlanningDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tblEnvironmentalPlanningDataTable();
            }
            
            internal void InitVars() {
                this.columnActionCompletionDate = this.Columns["ActionCompletionDate"];
                this.columnActionPriority = this.Columns["ActionPriority"];
                this.columnActionRequired = this.Columns["ActionRequired"];
                this.columnActionTargetDate = this.Columns["ActionTargetDate"];
                this.columnAquaticActivityID = this.Columns["AquaticActivityID"];
                this.columnEnvPlanningID = this.Columns["EnvPlanningID"];
                this.columnFollowUpCompletionDate = this.Columns["FollowUpCompletionDate"];
                this.columnFollowUpRequired = this.Columns["FollowUpRequired"];
                this.columnFollowUpTargetDate = this.Columns["FollowUpTargetDate"];
                this.columnIssue = this.Columns["Issue"];
                this.columnIssueCategory = this.Columns["IssueCategory"];
            }
            
            private void InitClass() {
                this.columnActionCompletionDate = new DataColumn("ActionCompletionDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActionCompletionDate);
                this.columnActionPriority = new DataColumn("ActionPriority", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActionPriority);
                this.columnActionRequired = new DataColumn("ActionRequired", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActionRequired);
                this.columnActionTargetDate = new DataColumn("ActionTargetDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActionTargetDate);
                this.columnAquaticActivityID = new DataColumn("AquaticActivityID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAquaticActivityID);
                this.columnEnvPlanningID = new DataColumn("EnvPlanningID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnvPlanningID);
                this.columnFollowUpCompletionDate = new DataColumn("FollowUpCompletionDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFollowUpCompletionDate);
                this.columnFollowUpRequired = new DataColumn("FollowUpRequired", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFollowUpRequired);
                this.columnFollowUpTargetDate = new DataColumn("FollowUpTargetDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFollowUpTargetDate);
                this.columnIssue = new DataColumn("Issue", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssue);
                this.columnIssueCategory = new DataColumn("IssueCategory", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssueCategory);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnEnvPlanningID}, true));
                this.columnEnvPlanningID.AutoIncrement = true;
                this.columnEnvPlanningID.AllowDBNull = false;
                this.columnEnvPlanningID.Unique = true;
            }
            
            public tblEnvironmentalPlanningRow NewtblEnvironmentalPlanningRow() {
                return ((tblEnvironmentalPlanningRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tblEnvironmentalPlanningRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tblEnvironmentalPlanningRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblEnvironmentalPlanningRowChanged != null)) {
                    this.tblEnvironmentalPlanningRowChanged(this, new tblEnvironmentalPlanningRowChangeEvent(((tblEnvironmentalPlanningRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblEnvironmentalPlanningRowChanging != null)) {
                    this.tblEnvironmentalPlanningRowChanging(this, new tblEnvironmentalPlanningRowChangeEvent(((tblEnvironmentalPlanningRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblEnvironmentalPlanningRowDeleted != null)) {
                    this.tblEnvironmentalPlanningRowDeleted(this, new tblEnvironmentalPlanningRowChangeEvent(((tblEnvironmentalPlanningRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblEnvironmentalPlanningRowDeleting != null)) {
                    this.tblEnvironmentalPlanningRowDeleting(this, new tblEnvironmentalPlanningRowChangeEvent(((tblEnvironmentalPlanningRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetblEnvironmentalPlanningRow(tblEnvironmentalPlanningRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblEnvironmentalPlanningRow : DataRow {
            
            private tblEnvironmentalPlanningDataTable tabletblEnvironmentalPlanning;
            
            internal tblEnvironmentalPlanningRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblEnvironmentalPlanning = ((tblEnvironmentalPlanningDataTable)(this.Table));
            }
            
            public System.DateTime ActionCompletionDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletblEnvironmentalPlanning.ActionCompletionDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.ActionCompletionDateColumn] = value;
                }
            }
            
            public short ActionPriority {
                get {
                    try {
                        return ((short)(this[this.tabletblEnvironmentalPlanning.ActionPriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.ActionPriorityColumn] = value;
                }
            }
            
            public string ActionRequired {
                get {
                    try {
                        return ((string)(this[this.tabletblEnvironmentalPlanning.ActionRequiredColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.ActionRequiredColumn] = value;
                }
            }
            
            public System.DateTime ActionTargetDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletblEnvironmentalPlanning.ActionTargetDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.ActionTargetDateColumn] = value;
                }
            }
            
            public int AquaticActivityID {
                get {
                    try {
                        return ((int)(this[this.tabletblEnvironmentalPlanning.AquaticActivityIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.AquaticActivityIDColumn] = value;
                }
            }
            
            public int EnvPlanningID {
                get {
                    return ((int)(this[this.tabletblEnvironmentalPlanning.EnvPlanningIDColumn]));
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.EnvPlanningIDColumn] = value;
                }
            }
            
            public System.DateTime FollowUpCompletionDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletblEnvironmentalPlanning.FollowUpCompletionDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.FollowUpCompletionDateColumn] = value;
                }
            }
            
            public bool FollowUpRequired {
                get {
                    try {
                        return ((bool)(this[this.tabletblEnvironmentalPlanning.FollowUpRequiredColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.FollowUpRequiredColumn] = value;
                }
            }
            
            public System.DateTime FollowUpTargetDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletblEnvironmentalPlanning.FollowUpTargetDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.FollowUpTargetDateColumn] = value;
                }
            }
            
            public string Issue {
                get {
                    try {
                        return ((string)(this[this.tabletblEnvironmentalPlanning.IssueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.IssueColumn] = value;
                }
            }
            
            public string IssueCategory {
                get {
                    try {
                        return ((string)(this[this.tabletblEnvironmentalPlanning.IssueCategoryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEnvironmentalPlanning.IssueCategoryColumn] = value;
                }
            }
            
            public bool IsActionCompletionDateNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.ActionCompletionDateColumn);
            }
            
            public void SetActionCompletionDateNull() {
                this[this.tabletblEnvironmentalPlanning.ActionCompletionDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsActionPriorityNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.ActionPriorityColumn);
            }
            
            public void SetActionPriorityNull() {
                this[this.tabletblEnvironmentalPlanning.ActionPriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IsActionRequiredNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.ActionRequiredColumn);
            }
            
            public void SetActionRequiredNull() {
                this[this.tabletblEnvironmentalPlanning.ActionRequiredColumn] = System.Convert.DBNull;
            }
            
            public bool IsActionTargetDateNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.ActionTargetDateColumn);
            }
            
            public void SetActionTargetDateNull() {
                this[this.tabletblEnvironmentalPlanning.ActionTargetDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsAquaticActivityIDNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.AquaticActivityIDColumn);
            }
            
            public void SetAquaticActivityIDNull() {
                this[this.tabletblEnvironmentalPlanning.AquaticActivityIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFollowUpCompletionDateNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.FollowUpCompletionDateColumn);
            }
            
            public void SetFollowUpCompletionDateNull() {
                this[this.tabletblEnvironmentalPlanning.FollowUpCompletionDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsFollowUpRequiredNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.FollowUpRequiredColumn);
            }
            
            public void SetFollowUpRequiredNull() {
                this[this.tabletblEnvironmentalPlanning.FollowUpRequiredColumn] = System.Convert.DBNull;
            }
            
            public bool IsFollowUpTargetDateNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.FollowUpTargetDateColumn);
            }
            
            public void SetFollowUpTargetDateNull() {
                this[this.tabletblEnvironmentalPlanning.FollowUpTargetDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsIssueNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.IssueColumn);
            }
            
            public void SetIssueNull() {
                this[this.tabletblEnvironmentalPlanning.IssueColumn] = System.Convert.DBNull;
            }
            
            public bool IsIssueCategoryNull() {
                return this.IsNull(this.tabletblEnvironmentalPlanning.IssueCategoryColumn);
            }
            
            public void SetIssueCategoryNull() {
                this[this.tabletblEnvironmentalPlanning.IssueCategoryColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblEnvironmentalPlanningRowChangeEvent : EventArgs {
            
            private tblEnvironmentalPlanningRow eventRow;
            
            private DataRowAction eventAction;
            
            public tblEnvironmentalPlanningRowChangeEvent(tblEnvironmentalPlanningRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tblEnvironmentalPlanningRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
